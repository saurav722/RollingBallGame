using UnityEngine;
using UnityEngine.SceneManagement;
using TMPro;

public class BallMovement : MonoBehaviour
{
    public TextMeshProUGUI valueText; // For displaying collectibles count
    public TextMeshProUGUI healthText; // UI Text to show health remaining

    private int value = 0;
    private int health = 2; // Set initial health to 2
    public float speed = 10f;
    public Transform cameraTransform;
    public Transform spawnPoint;
    public float fallThreshold = -10f;
    public int collectiblesCount = 0;
    private Rigidbody rb;

    public string gameOverScene = "GameOver"; // The scene to load when health reaches zero

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        Respawn();  // Set the ball's initial position to the spawn point
        UpdateUI();
    }

    void UpdateUI()
    {
        valueText.text = "Collectibles: " + collectiblesCount.ToString();
        healthText.text = "Lives: " + health.ToString();
    }

    void Update()
    {
        value = collectiblesCount;
        UpdateUI();

        // Ball movement logic
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        Vector3 cameraForward = cameraTransform.forward;
        Vector3 cameraRight = cameraTransform.right;

        cameraForward.y = 0;
        cameraRight.y = 0;

        cameraForward.Normalize();
        cameraRight.Normalize();

        Vector3 movement = (cameraForward * moveVertical + cameraRight * moveHorizontal).normalized;
        rb.AddForce(movement * speed);

        // Check if the ball has fallen off the map
        if (transform.position.y < fallThreshold)
        {
            LoseLife();
        }
    }

    // Function to handle respawn and reduce lives
    void LoseLife()
    {
        health--; // Reduce health by one
        if (health > 0)
        {
            Respawn();
        }
        else
        {
            SceneManager.LoadScene(gameOverScene); // Load the game over scene
        }
        UpdateUI();
    }

    // Function to respawn the ball
    void Respawn()
    {
        transform.position = spawnPoint.position;
        rb.velocity = Vector3.zero;
        rb.angularVelocity = Vector3.zero;
    }

    // Detect collisions
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.name.Contains("Obs"))
        {
            LoseLife();  // Reduce life on hitting an obstacle
        }

        if (collision.gameObject.name.Contains("NextLevel"))
        {
            LoadNextLevel();  // Load the next level when touching the goal
        }
    }

    // Detect when the ball triggers a collectible
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.name.Contains("Coin"))
        {
            collectiblesCount++;
            Destroy(other.gameObject);  // Destroy the collectible
            Debug.Log("Collected an item! Total collected: " + collectiblesCount);
            UpdateUI();
        }
    }

    // Function to load the next level in the build settings
    void LoadNextLevel()
    {
        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;
        if (currentSceneIndex < SceneManager.sceneCountInBuildSettings - 1)
        {
            SceneManager.LoadScene(currentSceneIndex + 1);
        }
        else
        {
            Debug.Log("No more levels. Restarting the game or displaying end screen.");
            SceneManager.LoadScene(0);  // Restart from the first level
        }
    }
}
